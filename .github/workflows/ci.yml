name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgis/postgis:16-3.4
        env:
          POSTGRES_DB: litrocerto_test
          POSTGRES_USER: litrocerto
          POSTGRES_PASSWORD: secret
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, pdo, pdo_pgsql, pgsql, redis, zip, bcmath, gd, sockets
          coverage: xdebug

      - name: Copy .env
        run: cp .env.example .env

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Configure environment
        run: |
          echo "DB_CONNECTION=pgsql" >> .env
          echo "DB_HOST=localhost" >> .env
          echo "DB_PORT=5432" >> .env
          echo "DB_DATABASE=litrocerto_test" >> .env
          echo "DB_USERNAME=litrocerto" >> .env
          echo "DB_PASSWORD=secret" >> .env
          echo "REDIS_HOST=localhost" >> .env
          echo "REDIS_PORT=6379" >> .env
          echo "CACHE_DRIVER=redis" >> .env
          echo "SESSION_DRIVER=redis" >> .env
          echo "QUEUE_CONNECTION=sync" >> .env
          echo "JWT_TTL=60" >> .env
          echo "JWT_REFRESH_TTL=20160" >> .env

      - name: Generate application key
        run: php artisan key:generate

      - name: Generate JWT secret
        run: php artisan jwt:secret --force

      - name: Run migrations
        run: php artisan migrate --force

      - name: Run tests
        run: php artisan test --coverage

      - name: Run Laravel Pint (Code Style)
        run: ./vendor/bin/pint --test

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/php/Dockerfile
          push: false
          tags: litrocerto-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Run security checker
        run: composer audit --no-dev || true
        
      - name: Check for security vulnerabilities only
        run: |
          OUTPUT=$(composer audit --format=json --no-dev 2>&1 || true)
          VULNERABILITIES=$(echo "$OUTPUT" | jq -r '.advisories // {} | length' 2>/dev/null || echo "0")
          if [ "$VULNERABILITIES" -gt 0 ]; then
            echo "❌ Found $VULNERABILITIES security vulnerabilities!"
            composer audit --no-dev
            exit 1
          else
            echo "✅ No security vulnerabilities found"
          fi
